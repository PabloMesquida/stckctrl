/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 box.glb --shadows
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { RigidBody, CuboidCollider, Debug } from "@react-three/rapier";
import { useFrame } from "@react-three/fiber";

export default function Model({ type }) {
  const { nodes, materials } = useGLTF("/models/box.glb");

  const body = useRef();

  console.log("TYPE", type);

  const impulseForce = 0.83;

  useFrame(() => {
    const bodyPosition = body.current.translation();
    const impulse = { x: 0, y: 0, z: -impulseForce };
    if (bodyPosition.y < 0.08 && bodyPosition.z > -0.05) {
      body.current.applyImpulse({ x: 0, y: 0, z: -impulseForce });
    } else if (bodyPosition.z < -0.05) {
      type === 0 && body.current.applyImpulse({ x: 0, y: 0, z: -impulseForce });
      type === 1 && body.current.applyImpulse({ x: impulseForce, y: 0, z: 0 });
      type === 2 && body.current.applyImpulse({ x: -impulseForce, y: 0, z: 0 });

      //impulse = { x: 0.18, y: 0, z: 0 };
    }
  });

  return (
    <RigidBody
      position={[0, 10, 9]}
      rotation={[0, -Math.PI / 2, 0]}
      ref={body}
      mass={2}
      // restitution={0}
      //friction={0.5}
    >
      <group dispose={null}>
        {type === 0 && (
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Simbol_01.geometry}
            material={materials.SimbolMaterial01}
            scale={[0.45, 0.45, 1.05]}
          />
        )}
        {type === 1 && (
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Simbol_02.geometry}
            material={materials.SimbolMaterial02}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[0.45, 1.05, 0.45]}
          />
        )}
        {type === 2 && (
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Simbol_03.geometry}
            material={materials.SimbolMaterial03}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[0.5, 1.05, 0.5]}
          />
        )}

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials.BoxMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_1.geometry}
          material={materials.LabelMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_2.geometry}
          material={materials.ZipMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_3.geometry}
          material={materials.CornerMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_4.geometry}
          material={materials.InfoMaterial}
        />
        <CuboidCollider args={[0.5, 0.5, 0.5]} restitution={0} friction={0.1} />
      </group>
    </RigidBody>
  );
}

useGLTF.preload("/models/box.glb");
